(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{611:function(s,e,a){"use strict";a.r(e);var t=a(4),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("边学边写，冲冲冲")])]),s._v(" "),a("h2",{attrs:{id:"了解内置模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解内置模块"}},[s._v("#")]),s._v(" 了解内置模块")]),s._v(" "),a("p",[s._v("node.js的内置模块就是node本身提供的模块，不用下载，直接使用require引入就可以使用这些模块的方法了。而这些模块在浏览器环境中是不能执行的。以下与大家见面的是我们在node中常用的一些模块，如有记录不完善或者想查看更多的，请前往 http://nodejs.cn/api/ 了解更多。")]),s._v(" "),a("h2",{attrs:{id:"path模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path模块"}},[s._v("#")]),s._v(" path模块")]),s._v(" "),a("p",[s._v("path用于处理文件和目录的路径。")]),s._v(" "),a("h3",{attrs:{id:"dirname-返回当前文件所在目录的绝对路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dirname-返回当前文件所在目录的绝对路径"}},[s._v("#")]),s._v(" __dirname 返回当前文件所在目录的绝对路径")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const path = require("path");\nconsole.log(__dirname);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"path-join-paths-用于路径的拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-join-paths-用于路径的拼接"}},[s._v("#")]),s._v(" path.join([...paths])   用于路径的拼接")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const path = require("path");\n//路径的拼接\nconsole.log(path.join("/node","index.json"));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"path-resolve-paths-将路径或路径片段的序列解析为绝对路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-resolve-paths-将路径或路径片段的序列解析为绝对路径"}},[s._v("#")]),s._v(" path.resolve([...paths]) 将路径或路径片段的序列解析为绝对路径")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const path = require("path");\nconsole.log(path.resolve("."));\nconsole.log(path.resolve(".."));\nconsole.log(path.resolve("test1","test2/test3"));\n//如果没有传入 path 片段，则 path.resolve() 会返回当前工作目录的绝对路径\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"path-basename-path-ext-返回-path-的最后一部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-basename-path-ext-返回-path-的最后一部分"}},[s._v("#")]),s._v(" path.basename(path[, ext]) 返回 path 的最后一部分")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const path = require("path");\nconsole.log(path.basename("/user/test/index.html"));\nconsole.log(path.basename("/user/test/index.html",".html"));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"fs模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs模块"}},[s._v("#")]),s._v(" fs模块")]),s._v(" "),a("p",[s._v("fs用于文件或文件夹的读写操作，较常用的是以下几种：")]),s._v(" "),a("h3",{attrs:{id:"fs-mkdir-path-options-callback-异步-新建文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdir-path-options-callback-异步-新建文件夹"}},[s._v("#")]),s._v(" fs.mkdir(path[,options],callback)  异步 新建文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//有三个参数，第一个参数是地址，就是你创建的文件夹存放的地址\n//第二个参数不是必填的参数, options 参数可以是一个整数，用于指定文件的模式（权限与粘滞位）。 也可以是一个对象，其中 recursive 属性指定是否创建父目录。\n//第三个参数是回调函数，参数就是err错误\n \nfs.mkdir('/tmp/test/web', { recursive: true }, (err) => {\n  if (err) throw err;\n});\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"fs-mkdirsync-path-options-同步-新建文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdirsync-path-options-同步-新建文件夹"}},[s._v("#")]),s._v(" fs.mkdirSync(path[, options]) 同步 新建文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//同步和异步的区别就不多说了，在写法上就是同步的方法没有回调函数\n//同步调用若是出错，都会终止执行，必须用try catch来捕获错误\n拿同步新建文件夹举例：\ntry{\n    const result = mkdirSync("./test");\n}catch(e){\n    console.log(new Error(e));\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"fs-rmdir-path-callback-异步-删除文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-rmdir-path-callback-异步-删除文件夹"}},[s._v("#")]),s._v(" fs.rmdir(path,callback) 异步 删除文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.rmdir("./test",(err)=>{\n    console.log(err);\n})\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"fs-rmdirsync-path-同步-删除文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-rmdirsync-path-同步-删除文件夹"}},[s._v("#")]),s._v(" fs.rmdirSync(path) 同步 删除文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.rmdirSync("./test");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"fs-readdir-path-options-callback-异步-读取文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-readdir-path-options-callback-异步-读取文件夹"}},[s._v("#")]),s._v(" fs.readdir(path[,options],callback) 异步 读取文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//读取文件夹的时候，回调函数中会有两个参数，一个是错误，另一个就是读取的文件\n//如果 options 是一个字符串，则指定字符编码。 如果 encoding 设为 'buffer'，则返回的文件名是 Buffer,可以定义为 utf8。\n \nfs.readdir(\"./test\",(err,files)=>{\n    console.log(err);\n    console.log(files); // 文件夹中的文件，以数组的形式存放\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"fs-readdirsync-path-options-同步-读取文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-readdirsync-path-options-同步-读取文件夹"}},[s._v("#")]),s._v(" fs.readdirSync(path[, options]) 同步 读取文件夹")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//如果 options 是一个字符串，则指定字符编码。 如果 encoding 设为 'buffer'，则返回的文件名是 Buffer,可以定义为 utf8。\n\nconst a = fs.readdirSync('./');\nconsole.log(a); // 文件夹中的文件，以数组的形式存放\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"fs-readfile-path-options-callback-异步-读文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-readfile-path-options-callback-异步-读文件"}},[s._v("#")]),s._v(" fs.readFile(path[, options],callback); 异步 读文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.readFile("../test/test.json",(err,data)=>{\n  if(err){\n    console.log(err);\n  }else{\n    console.log(JSON.parse(data));\n  }\n});\n\n//callback回调函数中有两个参数，一个是err，另一个是data，读取的数据，一般data的格式都要改变，两种方法:\n1.可以写成data.toString;\n2.可以调用方法的时候多加一个参数，改变数值类型的 fs.readFile(file,"utf8",callback);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"fs-readfilesync-path-options-同步-读文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-readfilesync-path-options-同步-读文件"}},[s._v("#")]),s._v(" fs.readFileSync(path[, options]) 同步 读文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const data = fs.readFileSync('../test/test.txt','utf8');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"fs-writefile-file-data-options-callback-异步-写文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-writefile-file-data-options-callback-异步-写文件"}},[s._v("#")]),s._v(" fs.writeFile(file, data[, options], callback) 异步 写文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("fs.writeFile('./test/index.json',JSON.stringify(data),(err)=>{\n  if(err){\n  \tconsole.log(err);\n  }\n});\n//如果没有该文件，会先创建该文件，若存在，会覆盖文件内容\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"fs-writefilesync-file-data-options-同步-写文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-writefilesync-file-data-options-同步-写文件"}},[s._v("#")]),s._v(" fs.writeFileSync(file, data[, options]) 同步 写文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("try{\n  fs.writeFileSync('./test/index.json',JSON.stringify(data));\n}catch(err){\n  console.log(err);\n}\n\n//如果没有该文件，会先创建该文件，若存在，会覆盖文件内容\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"fs-appendfile-file-data-options-callback-异步-不覆盖写文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-appendfile-file-data-options-callback-异步-不覆盖写文件"}},[s._v("#")]),s._v(" fs.appendFile(file, data[, options], callback) 异步 不覆盖写文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.appendFile("./file.txt",data,(err)=>{\n    console.log(err);\n});\n// 就是writeFile换成了appendFile，就可以不覆盖的写入内容了\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"fs-appendfilesync-file-data-options-同步-不覆盖写文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-appendfilesync-file-data-options-同步-不覆盖写文件"}},[s._v("#")]),s._v(" fs.appendFileSync(file, data[, options]) 同步 不覆盖写文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.appendFileSync("./file.txt",data);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"fs-unlink-path-callback-异步-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-unlink-path-callback-异步-删除文件"}},[s._v("#")]),s._v(" fs.unlink(path,callback) 异步 删除文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.unlink("./file.txt",(err)=>{\n    console.log(err);\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"fs-unlinksync-path-同步-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-unlinksync-path-同步-删除文件"}},[s._v("#")]),s._v(" fs.unlinkSync(path) 同步 删除文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('fs.unlink("./file.txt");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"url模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url模块"}},[s._v("#")]),s._v(" url模块")]),s._v(" "),a("h3",{attrs:{id:"使用传统的-api-解析-url-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用传统的-api-解析-url-字符串"}},[s._v("#")]),s._v(" 使用传统的 API 解析 URL 字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const url = require(\"url\");\nconst myURL = url.parse('https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash');\n\nconsole.log(myURL);\n\n\n/* 打印结果为解析后的URL对象\nUrl {\n  protocol: 'https:',\n  slashes: true,\n  auth: 'user:pass',\n  host: 'sub.host.com:8080',\n  port: '8080',\n  hostname: 'sub.host.com',\n  hash: '#hash',\n  //查询字符串，这里，如果我们想要以对象形式返回，可以让url.parse的第二个参数为true\n  search: '?query=string',\n  query: 'query=string',\n  pathname: '/p/a/t/h',\n  path: '/p/a/t/h?query=string',\n  href: 'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'\n}\n*/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"使用-whatwg-的-api-解析-url-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-whatwg-的-api-解析-url-字符串"}},[s._v("#")]),s._v(" 使用 WHATWG 的 API 解析 URL 字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const {URL} = require(\"url\");\nconst myURL = new URL('https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash');\n\nconsole.log(myURL);\n\n/* 打印结果为解析后的URL对象\nUrl {\n  protocol: 'https:',\n  slashes: true,\n  auth: 'user:pass',\n  host: 'sub.host.com:8080',\n  port: '8080',\n  hostname: 'sub.host.com',\n  hash: '#hash',\n  search: '?query=string',\n  query: 'query=string',\n  pathname: '/p/a/t/h',\n  path: '/p/a/t/h?query=string',\n  href: 'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'\n}\n*/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"querystring模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querystring模块"}},[s._v("#")]),s._v(" querystring模块")]),s._v(" "),a("p",[s._v("queryString就是查询字符串，模块提供了一些实用函数，用于解析与格式化 URL 查询字符串")]),s._v(" "),a("h3",{attrs:{id:"querystring-parse-str-sep-eq-options-解析url的查询字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querystring-parse-str-sep-eq-options-解析url的查询字符串"}},[s._v("#")]),s._v(" querystring.parse(str[, sep[, eq[, options]]]) 解析URL的查询字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- str <string> 要解析的 URL 查询字符串。\n- sep <string> 用于在查询字符串中分隔键值对的子字符串。默认值: '&'。\n- eq <string> 用于在查询字符串中分隔键和值的子字符串。默认值: '='。\n- options <Object>:\n  decodeURIComponent <Function> 当解码查询字符串中的百分比编码字符时使用的函数。默认  值: querystring.unescape()。  \n  maxKeys <number> 指定要解析的键的最大数量。指定 0 可移除键的计数限制。默认值: 1000。\n  \n  \nconst qs = require('querystring');\nconst b = qs.parse(\"foo=bar&abc=xyz&abc=123\");\nconsole.log(b);\n\n//{ foo: 'bar', abc: [ 'xyz', '123' ] }\n\n//默认情况下，会假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他的字符编码，则需要指定其他的 decodeURIComponent 选项:\n\nquerystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null, { decodeURIComponent: gbkDecodeURIComponent });\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"querystring-stringify-obj-sep-eq-options-序列化字符串为url查询字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querystring-stringify-obj-sep-eq-options-序列化字符串为url查询字符串"}},[s._v("#")]),s._v(" querystring.stringify(obj[, sep[, eq[, options]]]) 序列化字符串为url查询字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- obj <Object> 要序列化为 URL 查询字符串的对象。\n- sep <string> 用于在查询字符串中分隔键值对的子字符串。默认值: '&'。\n- eq <string> 用于在查询字符串中分隔键和值的子字符串。默认值: '='。\n- options:\nencodeURIComponent <Function> 当将查询字符串中不安全的 URL 字符转换为百分比编码时使用的函数。默认值: querystring.escape()。\n\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n// 返回 'foo=bar&baz=qux&baz=quux&corge='\n\nquerystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n// 返回 'foo:bar;baz:qux'\n\n//默认情况下，查询字符串中需要进行百分比编码的字符将会被编码为 UTF-8。 如果需要其他的编码，则需要指定其他的 encodeURIComponent 选项：\n\n\nquerystring.stringify({ w: '中文', foo: 'bar' }, null, null, { encodeURIComponent: gbkEncodeURIComponent });\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"events模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#events模块"}},[s._v("#")]),s._v(" events模块")]),s._v(" "),a("h3",{attrs:{id:"eventemitter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter"}},[s._v("#")]),s._v(" EventEmitter")]),s._v(" "),a("p",[s._v("events 模块提供了一个对象: events.EventEmitter")]),s._v(" "),a("p",[s._v("EventEmitter 的核心就是事件触发与事件监听器功能的封装")]),s._v(" "),a("p",[s._v("EventEmitter 的每个事件由一个事件名和若干个参 数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作 为回调函数参数传递")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const EventEmitter = require('events'); \nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\n//eventEmitter.on() 用于注册监听器， eventEmitter.emit() 用于触发事件\nmyEmitter.on('eventName', () => {\n  console.log('事件被触发了');\n});\nmyEmitter.emit('eventName'); \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"eventemitter-emit-eventname-callback-callback中this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-emit-eventname-callback-callback中this"}},[s._v("#")]),s._v(" eventEmitter.emit(eventName,callback)  callback中this")]),s._v(" "),a("p",[s._v("eventEmitter.emit() 方法可以传任意数量的参数到监听器函数。 当监听器函数被调用时， this 关键词会被指向监听器所绑定的 EventEmitter 实例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const myEmitter = new MyEmitter();\nmyEmitter.on('event', function(a, b) {\n  console.log(a, b, this, this === myEmitter);\n  // 打印:\n  //   aa bb MyEmitter {\n  //     domain: null,\n  //     _events: { event: [Function] },\n  //     _eventsCount: 1,\n  //     _maxListeners: undefined } true\n});\nmyEmitter.emit('event', 'aa', 'bb');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("也可以使用 ES6 的箭头函数作为监听器。但 this 关键词不会指向 EventEmitter 实例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const myEmitter = new MyEmitter();\nmyEmitter.on('event', (a, b) => {\n  console.log(a, b, this);\n  // 打印: aa bb {}\n});\nmyEmitter.emit('event', 'aa', 'bb');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"eventemitter-once"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-once"}},[s._v("#")]),s._v(" eventEmitter.once()")]),s._v(" "),a("p",[s._v("使用 eventEmitter.once() 可以注册最多可调用一次的监听器。 当事件被触发时，监听器会被注销")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.once('event', () => {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// 打印: 1\nmyEmitter.emit('event');\n// 不触发\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"emitter-removelistener-eventname-listener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emitter-removelistener-eventname-listener"}},[s._v("#")]),s._v(" emitter.removeListener(eventName, listener)")]),s._v(" "),a("p",[s._v("emitter.removeListener(eventName, listener)  从名为 eventName 的事件的监听器数组中移除指定的 listener")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const callback = (stream) => {\n  console.log('已连接');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"emitter-removealllisteners-eventname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emitter-removealllisteners-eventname"}},[s._v("#")]),s._v(" emitter.removeAllListeners([eventName])")]),s._v(" "),a("p",[s._v("emitter.removeAllListeners([eventName])   移除全部的事件侦听")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("server.removeAllListeners(['connection']);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"stream-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream-流"}},[s._v("#")]),s._v(" stream（流）")]),s._v(" "),a("p",[s._v("流（stream）是 Node.js 中处理流式数据的抽象接口")]),s._v(" "),a("p",[s._v("Node.js 中有四种基本的流类型：")]),s._v(" "),a("p",[s._v("Writable - 可写入数据的流（例如 fs.createWriteStream()）。\nReadable - 可读取数据的流（例如 fs.createReadStream()）。\nDuplex - 可读又可写的流（例如 net.Socket）。\nTransform - 在读写过程中可以修改或转换数据的 Duplex 流（例如 zlib.createDeflate()）。\n此外，该模块还包括实用函数 stream.pipeline()、stream.finished() 和 stream.Readable.from()。")]),s._v(" "),a("p",[s._v("几乎所有的 Node.js 应用都在某种程度上使用了流。 下面是一个例子，使用流实现了一个 HTTP 服务器：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  // req 是一个 http.IncomingMessage 实例，它是可读流。\n  // res 是一个 http.ServerResponse 实例，它是可写流。\n\n  let body = '';\n  // 接收数据为 utf8 字符串，\n  // 如果没有设置字符编码，则会接收到 Buffer 对象。\n  req.setEncoding('utf8');\n\n  // 如果添加了监听器，则可读流会触发 'data' 事件。\n  req.on('data', (chunk) => {\n    body += chunk;\n  });\n\n  // 'end' 事件表明整个请求体已被接收。 \n  req.on('end', () => {\n    try {\n      const data = JSON.parse(body);\n      // 响应信息给用户。\n      res.write(typeof data);\n      res.end();\n    } catch (er) {\n      // json 解析失败。\n      res.statusCode = 400;\n      return res.end(`错误: ${er.message}`);\n    }\n  });\n});\n\nserver.listen(1337);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h3",{attrs:{id:"fs-createreadstream-path-options-读取文件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-createreadstream-path-options-读取文件流"}},[s._v("#")]),s._v(" fs.createReadStream(path[, options]) 读取文件流")]),s._v(" "),a("p",[s._v("可读流的事件请具体参考 http://nodejs.cn/api/stream.html 文档")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let fs = require("fs");\nlet times = 0;\nlet stream = fs.createReadStream(\'../test.txt\', { start: 10, end: 99 }});\nstream.on("data", chunk => {\n    console.log("第"+(times++)+"次读取的块内容：");\n});\nstream.on("end", () => {\n    console.log("END");\n});\nstream.on("error", err => {\n    console.log(err);\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"fs-createwritestream-path-options-写入文件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-createwritestream-path-options-写入文件流"}},[s._v("#")]),s._v(" fs.createWriteStream(path[, options]) 写入文件流")]),s._v(" "),a("p",[s._v("可写流的事件请具体参考 http://nodejs.cn/api/stream.html 文档")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let fs = require('fs');\nlet stream = fs.createWriteStream('../test.txt', { encoding: 'utf8' });\nstream.write(\"要写入的文本1\");\nstream.write(\"要写入的文本2\");\n// ...\n//二进制\n//stream.write(new Buffer(\"文本3\", 'utf8'));\n//stream.write(new Buffer(\"文本4\", 'utf8'));\n// ...\nstream.end(); // 终止写入\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"readable-pipe-writable-options-把一个readable流和一个writeable流串起来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readable-pipe-writable-options-把一个readable流和一个writeable流串起来"}},[s._v("#")]),s._v(" readable.pipe(writable[,options]) 把一个Readable流和一个Writeable流串起来")]),s._v(" "),a("p",[s._v("两个流是可以串起来的，比如把一个Readable流和一个Writeable流串起来，此时，数据就会自动从Readable流进入Writeable流，此操作成为pipe")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let fs = require(\'fs\');\nlet rs = fs.createReadStream("A.txt");\nlet ws = fs.createWriteStream("B.txt");\n\nrs.pipe(ws);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上述代码就可以实现A.txt中的内容写入到B.txt中，默认情况下，当Readable流中的数据读取完毕后，就会触发end事件，然后自动关闭Writeable流，我们可以通过以下设定来取消自动关闭Writeable流")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("rs.pipe(ws, { end: false });\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"http模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http模块"}},[s._v("#")]),s._v(" http模块")]),s._v(" "),a("p",[s._v("发起http请求")]),s._v(" "),a("h3",{attrs:{id:"http-request-options-callback-http-request-url-options-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-request-options-callback-http-request-url-options-callback"}},[s._v("#")]),s._v(" http.request(options[, callback]) / http.request(url[, options][, callback])")]),s._v(" "),a("p",[s._v("url 可以是字符串或 URL 对象。 如果 url 是一个字符串，则会自动使用 [url.URL()] 解析它。 如果它是一个 URL 对象，则会自动转换为普通的 options 对象。")]),s._v(" "),a("p",[s._v("如果同时指定了 url 和 options，则对象会被合并，其中 options 属性优先。")]),s._v(" "),a("p",[s._v("可选的 callback 参数会作为单次监听器被添加到 'response' 事件。")]),s._v(" "),a("p",[s._v("官方事例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const postData = querystring.stringify({\n  'msg': '你好世界'\n});\n\nconst options = {\n  hostname: 'nodejs.cn',\n  port: 80,\n  path: '/upload',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Content-Length': Buffer.byteLength(postData)\n  }\n};\n\nconst req = http.request(options, (res) => {\n  console.log(`状态码: ${res.statusCode}`);\n  console.log(`响应头: ${JSON.stringify(res.headers)}`);\n  res.setEncoding('utf8');\n  res.on('data', (chunk) => {\n    console.log(`响应主体: ${chunk}`);\n  });\n  res.on('end', () => {\n    console.log('响应中已无数据');\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(`请求遇到问题: ${e.message}`);\n});\n\n// 将数据写入请求主体。\nreq.write(postData);\nreq.end();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("在示例中调用了 req.end()。 使用 http.request() 时，必须始终调用 req.end() 来表示请求的结束，即使没有数据被写入请求主体")]),s._v(" "),a("h3",{attrs:{id:"http-get-options-callback-http-get-url-options-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-get-options-callback-http-get-url-options-callback"}},[s._v("#")]),s._v(" http.get(options[, callback]) / http.get(url[, options][, callback])")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('http\n    .get(options, response => {\n      response.setEncoding(\'utf8\');\n      let data = "";\n      response.on("data", (chunk) => {\n        data += chunk;\n      });\n      response.on("end", () => {\n        console.log("ok");\n      });\n    })\n    .on("error", (err) => {\n      console.log("TopicList Request Error: " + err.message);\n    });\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("options 接受与 http.request() 相同的 options，但是 method 始终被设置为 GET。 从原型继承的属性会被忽略")]),s._v(" "),a("h3",{attrs:{id:"使用http模块搭建服务器-http-createserver-options-requestlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用http模块搭建服务器-http-createserver-options-requestlistener"}},[s._v("#")]),s._v(" 使用http模块搭建服务器 http.createServer([options][, requestListener])")]),s._v(" "),a("p",[s._v("Node.js的http模块，已经帮助我们隐藏了处理TCP连接的具体细节，使得我们可以在更高的层次上直接处理，主要是使用http模块提供的request和response对象")]),s._v(" "),a("p",[s._v("request对象封装了http请求\nresponse对象封装了http相应")]),s._v(" "),a("p",[s._v("1、创建一个http服务器（假设文件在server.js）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const http = require('http');\n\nconst server = http.createServer((request, response) => {\n    response.writeHead(200, {'Content-Type': 'text/html'});\n    response.end(\"This is a server by Node.js\");\n});\n\nserver.listen(1234);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这样子我们就完成了一个http服务器的创建了，使用node server.js开启，然后只要访问http://localhost:1234，就会看到页面上输出：This is a server by Node.js")]),s._v(" "),a("p",[s._v("2、我们可以看到http.createServer中有两个参数request和response，这两个参数，request是用来获得客户端发送的HTTP请求的（request对象中包含了许多的请求信息），而response是用来让服务器做出回应的")]),s._v(" "),a("h2",{attrs:{id:"process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[s._v("#")]),s._v(" process")]),s._v(" "),a("h3",{attrs:{id:"process-nexttick-callback-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick-callback-args"}},[s._v("#")]),s._v(" process.nextTick(callback[, ...args])")]),s._v(" "),a("p",[s._v("关于process.nextTick后面我们会着重去讲解")]),s._v(" "),a("h2",{attrs:{id:"crypto模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crypto模块"}},[s._v("#")]),s._v(" crypto模块")]),s._v(" "),a("p",[s._v("crypto 模块提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装")]),s._v(" "),a("p",[s._v("这块内容，也会单独写一篇文章来深度分析一下")]),s._v(" "),a("h2",{attrs:{id:"util实用工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util实用工具"}},[s._v("#")]),s._v(" util实用工具")]),s._v(" "),a("p",[s._v("具体内容请参考 http://nodejs.cn/api/util.html")]),s._v(" "),a("p",[s._v("以上这些都是平时在使用node过程中比较常用的一些内容，当然如果说的不全，也希望各位多多包涵，没写全的内容请各位看官到官网去深度挖掘和吸收哦，谢谢～")])])}),[],!1,null,null,null);e.default=n.exports}}]);