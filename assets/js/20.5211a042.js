(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{608:function(s,n,e){"use strict";e.r(n);var t=e(4),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("blockquote",[e("p",[s._v("夯实基础，方能手到擒来")])]),s._v(" "),e("h2",{attrs:{id:"promise是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise是什么"}},[s._v("#")]),s._v(" Promise是什么")]),s._v(" "),e("p",[s._v("Promise是一种异步编程的解决方案，是一个构造函数，具有all、reject、resolve这几个静态方法，原型上有then、catch等方法")]),s._v(" "),e("p",[s._v("Promise具有两大特征：\n(1) 对象的状态不受外界影响。Promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态\n(2) 状态一旦改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况其中之一发生，状态就不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果状态改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果")]),s._v(" "),e("p",[s._v("下面是一个简单的Promise用法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const promise = new Promise((resolve,reject) =>{\n\tsetTimeout(()=>{\n\t\tconsole.log('promise已经执行')\n\t\tresolve({say:'这是成功执行的结果'})\n\t},3000)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("我们将上面一段代码放到浏览器控制台中去调试一下，看看得到的结果是什么，会发现在3秒之后控制台打印出")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// promise已经执行\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("其中执行过程是：执行了一个异步操作，也就是setTimeout，3秒后，输出“promise已经执行”，并且调用resolve方法")]),s._v(" "),e("p",[s._v("注意！我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，所以我们用Promise的时候一般是放在一个函数中，在需要的时候去执行这个函数，如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<div onClick={handleClick}>点击执行异步方法<div>\nconst handleClick = ()=>{\n\tconst promise = new Promise((resolve,reject) =>{\n\t\tsetTimeout(()=>{\n\t\t\tconsole.log('promise已经执行')\n\t\t\tresolve({say:'这是成功执行的结果'})\n\t\t},3000)\n\t})\n\treturn promise\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("上面这样调用handleClick方法后，会return出Promise对象，也就是说，执行这个函数我们得到了一个Promise对象，接下来就可以用Promise对象上的then、catch方法了，这就是Promise的强大之处了")]),s._v(" "),e("h2",{attrs:{id:"then方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#then方法"}},[s._v("#")]),s._v(" then方法")]),s._v(" "),e("p",[s._v("看下面的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('handleClick().then(result=>{\n\tconsole.log(result)\n})\n\n// {say: "这是成功执行的结果"}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("你可能会觉得在这个和写一个回调函数没有什么区别；那么，如果有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const promise2 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n\t\tresolve('promise2执行成功的结果')\n\t},3000)\n})\n\nhandleClick()\n.then(result=>{\n\tconsole.log(result)\n\treturn promise2\n})\n.then(result=>{\n\tconsole.log(result)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("以上是对promise的resolve用法进行了解释，相当于resolve是对promise成功时候的回调，它把promise的状态修改为fullfiled，那么，reject就是失败时候的回调，他把promise的状态修改为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const handleClick = ()=>{\n\tconst p = new Promise((resolve,reject)=>{\n\t   setTimeout(()=>{\n\t\t    console.log('这里已经执行')\n\t\t    reject('这是失败的结果')\n\t   },3000)\n})\n\treturn p\n}\n\nhandleClick().then(result=>{\n\tconsole.log('成功:',result)\n},err=>{\n\tconsole.log('失败:',err)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("3秒后输出的结果是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//这里已经执行\n//失败: 这是失败的结果\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("运行handleClick并且在then中传了两个参数，这两个参数分别是两个函数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。（也就是说then方法中接受两个回调，一个成功的回调函数，一个失败的回调函数，并且能在回调函数中拿到成功的数据和失败的原因），所以我们能够分别拿到成功和失败传过来的数据就有以上的运行结果")]),s._v(" "),e("h2",{attrs:{id:"catch方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#catch方法"}},[s._v("#")]),s._v(" catch方法")]),s._v(" "),e("p",[s._v("与Promise对象方法then方法并行的一个方法就是catch,与try  catch类似，catch就是用来捕获异常的，也就是和then方法中接受的第二参数rejected的回调是一样的，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const handleClick = ()=>{\n\tconst p = new Promise((resolve,reject)=>{\n\t   setTimeout(()=>{\n\t\t    console.log('这里已经执行')\n\t\t    reject('这是失败的结果')\n\t   },3000)\n})\n\treturn p\n}\n\nhandleClick()\n.then(result=>{\n\tconsole.log('成功:',result)\n})\n.catch(err=>{\n\tconsole.log('失败:',err)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("catch方法最大的作用是：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中")]),s._v(" "),e("h2",{attrs:{id:"finally方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#finally方法"}},[s._v("#")]),s._v(" finally方法")]),s._v(" "),e("p",[s._v("直接看代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const promise = new Promise(function(resolve, reject) {\n    setTimeout(()=>{\n      if (true){\n        resolve('执行成功')\n      } else {\n        reject('error')\n      }\n    },1000)\n  }).then(res=>{\n    console.log(res);\n  }).catch(err=>{\n    console.log(err)\n  }).finally(()=>{\n    console.log('finally')\n  });\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数")]),s._v(" "),e("h2",{attrs:{id:"静态all方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态all方法"}},[s._v("#")]),s._v(" 静态all方法")]),s._v(" "),e("p",[s._v("先看一下下面的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const p1 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p1执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p1失败返回值')\n\t\t\t}\n\t\t},1000)\n\t})\n\treturn p\n}\n\nconst p2 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p2执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p2失败返回值')\n\t\t\t}\n\t\t},2000)\n\t})\n\treturn p\n}\n\nconst p3 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p3执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p3失败返回值')\n\t\t\t}\n\t\t},3000)\n\t})\n\treturn p\n}\n\nPromise.all([p1(),p2(),p3()]).then(result=>{\n\tconsole.log(result)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("p",[s._v("Promise.all() 的作用是把多个 Promise 实例包装成一个新的 Promise 实例")]),s._v(" "),e("ul",[e("li",[s._v("只有 p1、p2、p3 的状态都变为已成功, p 的状态才会变为已成功 ，此 pl 、p2 、p3 的返回值组成一个数组，传递给 p 的回调函数")]),s._v(" "),e("li",[s._v("只要 pl 、p2、 p3 中有一个的状态变为已失败，p 的状态就会变为已失败，此时 pl 、p2、 p3 中第一个状态变为已失败的返回值传递给 p 的回调函数")])]),s._v(" "),e("p",[s._v("这样以后就可以用all并行执行多个异步操作，并且在一个回调中处理所有的返回数据，比如你需要提前准备好所有数据才渲染页面的时候就可以使用all,执行多个异步操作将所有的数据处理好，再去渲染")]),s._v(" "),e("h2",{attrs:{id:"静态race方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态race方法"}},[s._v("#")]),s._v(" 静态race方法")]),s._v(" "),e("p",[s._v("all是等所有的异步操作都执行完了再执行then方法回调，那么race方法就是相反的，顾名思义，谁先执行完成就先执行回调。先执行完的不管是进行了race的成功回调还是失败回调，其余的将不会再进入race的任何回调")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const p1 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p1执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p1失败返回值')\n\t\t\t}\n\t\t},1000)\n\t})\n\treturn p\n}\n\nconst p2 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p2执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p2失败返回值')\n\t\t\t}\n\t\t},2000)\n\t})\n\treturn p\n}\n\nconst p3 = ()=>{\n\tconst time = Date.now()\n\tlet p = new Promise((resolve,reject)=>{\n\t\tsetTImeout({\n\t\t\tif(time%2===0){\n\t\t\t\tresolve('p3执行成功返回值')\n\t\t\t}else{\n\t\t\t\treject('p3失败返回值')\n\t\t\t}\n\t\t},3000)\n\t})\n\treturn p\n}\n\nPromise.race([p1(),p2(),p3()]).then(result=>{\n\tconsole.log(result)\n},err=>{\n\tconsole.log(err)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br")])]),e("h2",{attrs:{id:"静态方法resolve和reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态方法resolve和reject"}},[s._v("#")]),s._v(" 静态方法resolve和reject")]),s._v(" "),e("p",[s._v("直接看代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 情况一，Promise静态方法传入一个值\nPromise.resolve('foo')\n.then(function(res) {\n    console.log(res)  // foo\n})\n\n// 等价于\nnew Promise(function(resolve, reject) {\n    resolve('foo')\n})\n\n// 情况二，Promise静态方法传入一个promise对象\nconst promise = api('/api/users.json')\nconst promise2 = Promise.resolve(promise)\n// promise的静态方法传入一个promise，那他会原样的返回传入的promise对象\nconsole.log(promise === promise2) // true\n\n// 情况三：传入一个对象，也带有then，且then函数的参数也包含onFullFiled和onRejected两种状态的回调，也是可以将其转换成对应的Promise对象的，如下：\nPromise.resolve({\n    // 这种带then方法的对象，实现了一个thenable的接口，可以被then的对象；这在之前原生PROMISE对象没普及时，很多三方库封装promise对象时都会采用这种思想\n    then: function(onFullFiled, onRejected) {\n        onFullFiled('foo')\n    }\n})\n.then(res => {\n    console.log(res)  // foo\n})\n\n// 快速创建一定是失败的promise对象的静态方法\nPromise.reject(new Error())\n.catch(error => {\n    console.log(error)\n})\n// 无论传入什么参数都会作为promise对象失败的原因\nPromise.reject(anything)\n.catch(err => {\n    console.log(err)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[s._v("好了，关于Promise的用法，在这里分享完了，接下来我们将进一步解析一下Promise的内在原理")])])}),[],!1,null,null,null);n.default=a.exports}}]);