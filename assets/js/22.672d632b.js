(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{609:function(s,e,t){"use strict";t.r(e);var n=t(4),r=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("夯实基础，方能手到擒来")])]),s._v(" "),t("h2",{attrs:{id:"静态方法promise-rosolve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法promise-rosolve"}},[s._v("#")]),s._v(" 静态方法Promise.rosolve()")]),s._v(" "),t("p",[s._v("用过这个方法的应该都知道：")]),s._v(" "),t("ul",[t("li",[s._v("这个方法的作用是将传入的参数转化成promise对象")]),s._v(" "),t("li",[s._v("如果参数是一个 Promise 实例，直接返回这个 Promise 实例")]),s._v(" "),t("li",[s._v("如果参数是一个 具有then方法的 thenable 对象，例如以下的对象，Promise.resolve() 方法会将这个对象转为 Promise 对象，然后立即执行 thenable 对象 then 方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const thenable = {\n\tthen: function(resolve,reject){\n\t\tresolve('ok')\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("传入的参数不是对象，或者不具有上面 then 方法的对象，那么 Promise.resolve() 方法返回个新的 Promise 实例，状态为已成功，并把参数传递出去")]),s._v(" "),t("li",[s._v("不带有任何参数，Promise.resolve() 方法允许在调用时不带有参数而直接返回个新的 Promise 实例，状态为已成功")])]),s._v(" "),t("p",[s._v("基于以上用法，我们来实现一下这个方法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.resolve = function(param){\n\t// 如果传入的参数已经是个Promise对象了，直接返回这个对象\n\tif(param instanceof Promise){\n\t\treturn param;\n\t}\n\treturn new Promise((resolve,reject)=>{\n\t\t//如果参数是一个 具有then方法的 thenable 对象 , 执行then方法\n\t\tif(param && Object.prototype.toString.call(param) === '[object Object]' && typeof param.then === 'function' ){\n\t\t\tparam.then(resolve,reject);\n\t\t}else{\n\t\t\tresolve(param);  // 传入的参数不是对象，或者不具有上面 then 方法的对象, 返回一个promise实例，状态为成功\n\t\t}\n\t})\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("h2",{attrs:{id:"静态方法promise-reject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法promise-reject"}},[s._v("#")]),s._v(" 静态方法Promise.reject()")]),s._v(" "),t("p",[s._v("同样回顾一下Promise.reject()的用法：")]),s._v(" "),t("ul",[t("li",[s._v("返回一个新的 Promise 实例，状态为已失败，并把参数作为失败的原因传递出去")])]),s._v(" "),t("p",[s._v("这个比较容易实现了：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.reject = function(param){\n\treturn new Promise((resolve,reject)=>{\n\t\treject(param);\n\t})\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"静态方法promise-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法promise-all"}},[s._v("#")]),s._v(" 静态方法Promise.all()")]),s._v(" "),t("p",[s._v("Promise.all()的用法是：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.all([p1,p2,p3]).then(res=>{console.log(res)})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("把多个 Promise 实例包装成一个新的 Promise 实例")]),s._v(" "),t("li",[s._v("其中 p1、p2、p3 不是 Promise 实例的，内部会通过 Promise.resolve() 将其转成 Promise 实例")]),s._v(" "),t("li",[s._v("promise 的状态由 p1、p2、p3 决定, 分成两种情况：\n1.只有 p1、p2、p3 的状态都变为已成功, promise的状态才会变为已成功 ，此 pl 、p2、 p3 的返回值组成一个数组，传递给 promise 的回调函数\n2.只要 pl 、p2 、p3 中有一个的状态变为已失败，p 的状态就会变为已失败，此时 pl 、p2、 p3 中第一个状态变为已失败的返回值会传递给 promise的回调函数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.all = function(promiseArray){\n\treturn new Promise((resolve,reject)=>{\n\t\tlet result = [];\n\t\tconst handler = (i,v)=>{\n\t\t\tresult[i] = v;\n\t        if(i + 1 === promisesArray.length){\n\t          resolve(result);\n\t        }\n\t\t}\n\t\n\t\tfor(let i = 0; i < promiseArray.length; i++){\n\t\t\tlet promise = promiseArray[i]\n\t\t\tif(promise && promise.then && typeof promise.then === 'function'){\n\t\t\t\tpromise.then(v=>{\n\t\t\t\t\thandler(i,v);\n\t\t\t\t},res=>{\n\t\t\t\t\treject(err);\n\t\t\t\t})\n\t\t\t}else{\n\t\t\t\thandler(i,promise);\n\t\t\t}\n\t\t}\n\t})\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h2",{attrs:{id:"静态方法promise-race"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法promise-race"}},[s._v("#")]),s._v(" 静态方法Promise.race()")]),s._v(" "),t("p",[s._v("Promise.race() 的用法:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.race([p1,p2,p3]).then(res=>{console.log(res)});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("把多个 Promise 实例包装成一个新的 Promise 实例")]),s._v(" "),t("li",[s._v("其中 p1、p2、p3 不是 Promise 实例的，内部会通过 Promise.resolve() 将其转成 Promise 实例")]),s._v(" "),t("li",[s._v("promise 的状态由 p1、p2、p3 决定, 只要 pl、 p2、 p3 中有一个状态改变，promise 的状态马上就会对应改变，此时 pl 、p2、 p3 中第一个状态改变的返回值会传递给 promise的回调函数")])]),s._v(" "),t("p",[s._v("那么试着按照上面的用法来写一下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Promise.race = function(promiseArray){\n\treturn new Promise((resolve,reject)=>{\n\t\tfor(let i =0; i < promiseArray.length; i++){\n\t\t\tlet promise = promiseArray[i];\n\t\t\tif(promise && promise.then && typeof promise.then === 'function'){\n\t\t\t\tpromise.then(v=>{\n\t\t\t\t\tresolve(v);\n\t\t\t\t},err=>{\n\t\t\t\t\treject(err);\n\t\t\t\t})\n\t\t\t}else{\n\t\t\t\tresolve(promise);\n\t\t\t}\n\t\t}\n\t])\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("至此，结合上两篇文章，我们通过对Promise的深度解析，已经全面了解了Promise的用法和其内部的实现原理，我们就可以在工作中更好更灵活的运用它了")])])}),[],!1,null,null,null);e.default=r.exports}}]);